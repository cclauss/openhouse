"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3279],{7161:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var a=s(5893),t=s(1151);const l={title:"SQL",tags:["Spark","SQL","API","OpenHouse","Iceberg"]},r=void 0,i={id:"User Guide/Catalog/SQL",title:"SQL",description:"Data Definition Language (DDL)",source:"@site/docs/User Guide/Catalog/SQL.md",sourceDirName:"User Guide/Catalog",slug:"/User Guide/Catalog/SQL",permalink:"/docs/User Guide/Catalog/SQL",draft:!1,unlisted:!1,tags:[{label:"Spark",permalink:"/docs/tags/spark"},{label:"SQL",permalink:"/docs/tags/sql"},{label:"API",permalink:"/docs/tags/api"},{label:"OpenHouse",permalink:"/docs/tags/open-house"},{label:"Iceberg",permalink:"/docs/tags/iceberg"}],version:"current",frontMatter:{title:"SQL",tags:["Spark","SQL","API","OpenHouse","Iceberg"]},sidebar:"docsSidebar",previous:{title:"User Guide",permalink:"/docs/category/user-guide"},next:{title:"Scala",permalink:"/docs/User Guide/Catalog/Scala"}},o={},d=[{value:"Data Definition Language (DDL)",id:"data-definition-language-ddl",level:2},{value:"CREATE TABLE",id:"create-table",level:3},{value:"PARTITIONED BY",id:"partitioned-by",level:4},{value:"TBLPROPERTIES",id:"tblproperties",level:4},{value:"CREATE TABLE AS SELECT (CTAS)",id:"create-table-as-select-ctas",level:4},{value:"REFRESH TABLE",id:"refresh-table",level:3},{value:"DROP TABLE",id:"drop-table",level:3},{value:"ALTER TABLE",id:"alter-table",level:3},{value:"ALTER TABLE ... SET TBLPROPERTIES",id:"alter-table--set-tblproperties",level:4},{value:"ALTER TABLE ... ADD COLUMN",id:"alter-table--add-column",level:4},{value:"ALTER TABLE ... ALTER COLUMN",id:"alter-table--alter-column",level:4},{value:"GRANT/ REVOKE",id:"grant-revoke",level:3},{value:"ALTER TABLE SET POLICY (SHARING=)",id:"alter-table-set-policy-sharing",level:4},{value:"GRANT/ REVOKE SELECT ON TABLE",id:"grant-revoke-select-on-table",level:4},{value:"GRANT/ REVOKE MANAGE GRANTS ON TABLE",id:"grant-revoke-manage-grants-on-table",level:4},{value:"GRANT/REVOKE CREATE TABLE ON DATABASE",id:"grantrevoke-create-table-on-database",level:4},{value:"SHOW GRANTS ON TABLE/DATABASE",id:"show-grants-on-tabledatabase",level:4},{value:"Reads",id:"reads",level:2},{value:"SELECT FROM",id:"select-from",level:3},{value:"SELECT FROM w/ Time-Travel",id:"select-from-w-time-travel",level:3},{value:"Writes",id:"writes",level:2},{value:"INSERT INTO",id:"insert-into",level:3},{value:"DELETE FROM",id:"delete-from",level:3},{value:"INSERT OVERWRITE",id:"insert-overwrite",level:3},{value:"UPDATE",id:"update",level:3},{value:"MERGE INTO",id:"merge-into",level:3},{value:"Inspecting Metadata",id:"inspecting-metadata",level:2},{value:"List Partitions",id:"list-partitions",level:3},{value:"List Snapshots",id:"list-snapshots",level:3},{value:"Unsupported Operations",id:"unsupported-operations",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"data-definition-language-ddl",children:"Data Definition Language (DDL)"}),"\n",(0,a.jsxs)(n.p,{children:["OpenHouse tables supports ",(0,a.jsx)(n.a,{href:"https://iceberg.apache.org/",children:"Apache Iceberg"})," as the underlying table format. You can use native\nSpark syntax to create, alter, and drop tables, but do note there are some constraints OpenHouse imposes."]}),"\n",(0,a.jsx)(n.h3,{id:"create-table",children:"CREATE TABLE"}),"\n",(0,a.jsx)(n.p,{children:"To create an OpenHouse table, run following SQL in Spark."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE openhouse.db.table (id bigint COMMENT 'unique id', data string);\n"})}),"\n",(0,a.jsx)(n.p,{children:"OpenHouse supports following Create clauses:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"PARTITIONED BY"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"TBLPROPERTIES (\u2018key\u2019=\u2019value\u2019,..)"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["List of supported DataTypes are the same as found in ",(0,a.jsx)(n.a,{href:"https://iceberg.apache.org/docs/latest/spark-writes/#spark-type-to-iceberg-type",children:"Iceberg Spark Types"}),"."]}),"\n",(0,a.jsxs)(n.admonition,{type:"warning",children:[(0,a.jsx)(n.p,{children:"OpenHouse does not support following Create clauses:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"LOCATION (*)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"CLUSTERED BY (*)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"COMMENT \u2018table documentation\u2019"})}),"\n"]})]}),"\n",(0,a.jsx)(n.h4,{id:"partitioned-by",children:"PARTITIONED BY"}),"\n",(0,a.jsx)(n.p,{children:"OpenHouse supports single timestamp column to be specified in the partitioning scheme. It also supports upto three string or integer type column based partitioning scheme.\nTo partition your table, you can use the following SQL syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE openhouse.db.table(datepartition string, epoch_ts timestamp)\nPARTITIONED BY (\n    days(epoch_ts),\n    datepartition\n)\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"days(epoch_ts)"}),': partitions data by applying day-granularity on the timestamp-type column "epoch_ts".']}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Other granularities supported are:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"years(epoch_ts)"}),": partition by year"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"months(epoch_ts)"}),": partition by month"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"hours(epoch_ts)"}),": partition by hour"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You can also partition your data based on string column by using identity partitioning (for example: ",(0,a.jsx)(n.code,{children:"datepartition"}),")."]}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Iceberg transforms such as bucket, truncate are not supported on timestamp column."}),"\n",(0,a.jsx)(n.li,{children:"No transformation is supported on string or integer type partition column."}),"\n"]})}),"\n",(0,a.jsx)(n.h4,{id:"tblproperties",children:"TBLPROPERTIES"}),"\n",(0,a.jsx)(n.p,{children:"To set table properties, you can use the following SQL syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE openhouse.db.table(\n    data string\n)\nTBLPROPERTIES (\n    'key'='value',\n    ...\n);\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["Keys with the prefix \u201copenhouse.\u201d (for example: \u201copenhouse.tableId\u201d) are preserved and cannot be set/modified.\nAdditionally, all Iceberg ",(0,a.jsx)(n.a,{href:"https://github.com/apache/iceberg/blob/master/core/src/main/java/org/apache/iceberg/TableProperties.java",children:"TableProperties"}),"\nare also preserved.\nCatalog service has the ability to set these preserved properties as it finds suit."]})}),"\n",(0,a.jsx)(n.h4,{id:"create-table-as-select-ctas",children:"CREATE TABLE AS SELECT (CTAS)"}),"\n",(0,a.jsx)(n.p,{children:"To create an OpenHouse table with some data, run following SQL in Spark."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE openhouse.db.table\nAS\nSELECT * FROM hive.srcDb.srcTable WHERE data = 'v1';\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Create table like tableName"})," is not supported. You can use ",(0,a.jsx)(n.code,{children:"create table A as select * from B limit 0"}),"  to achieve same effect"]})}),"\n",(0,a.jsx)(n.h3,{id:"refresh-table",children:"REFRESH TABLE"}),"\n",(0,a.jsx)(n.p,{children:"Upon reading a table, its state is cached in your session. In order to read the new state of the table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"REFRESH TABLE openhouse.db.table;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"drop-table",children:"DROP TABLE"}),"\n",(0,a.jsx)(n.p,{children:"To delete table\u2019s data and metadata, run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"DROP TABLE openhouse.db.table;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"alter-table",children:"ALTER TABLE"}),"\n",(0,a.jsx)(n.p,{children:"OpenHouse supports following ALTER statements"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Setting or removing table properties."}),"\n",(0,a.jsxs)(n.li,{children:["Schema Evolution:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Adding columns in both top and nested level."}),"\n",(0,a.jsx)(n.li,{children:"Widening the type of int, float, and decimal fields."}),"\n",(0,a.jsx)(n.li,{children:"Making required columns optional."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{type:"warning",children:[(0,a.jsx)(n.p,{children:"OpenHouse doesn\u2019t allow the following:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Schema evolution: Drop, rename and reordering."}),"\n",(0,a.jsx)(n.li,{children:"Renaming a table."}),"\n",(0,a.jsx)(n.li,{children:"Adding, removing, and changing partitioning."}),"\n",(0,a.jsxs)(n.li,{children:["Other iceberg alters such as: ",(0,a.jsx)(n.code,{children:"write ordered by"})," / ",(0,a.jsx)(n.code,{children:"write distributed by"})]}),"\n"]})]}),"\n",(0,a.jsx)(n.h4,{id:"alter-table--set-tblproperties",children:"ALTER TABLE ... SET TBLPROPERTIES"}),"\n",(0,a.jsx)(n.p,{children:"To set table properties, you can use the following SQL syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE openhouse.db.table SET TBLPROPERTIES (\n  'key1' = 'value1',\n  'key2' = 'value2'\n)\n"})}),"\n",(0,a.jsx)(n.p,{children:"To unset table properties, you can use the following SQL syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE openhouse.db.table UNSET TBLPROPERTIES ('key1', 'key2')\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["Keys with the prefix \u201copenhouse.\u201d (for example: \u201copenhouse.tableId\u201d) are preserved and cannot be set/modified.\nAdditionally, all Iceberg ",(0,a.jsx)(n.a,{href:"https://github.com/apache/iceberg/blob/master/core/src/main/java/org/apache/iceberg/TableProperties.java",children:"TableProperties"})," are also preserved.\nCatalog service has the ability to set these preserved properties as it finds suit."]})}),"\n",(0,a.jsx)(n.h4,{id:"alter-table--add-column",children:"ALTER TABLE ... ADD COLUMN"}),"\n",(0,a.jsx)(n.p,{children:"Adding column is a supported schema evolution, to add a new column:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE openhouse.db.table\nADD COLUMNS (\n    new_column string comment 'new_column docs'\n)\n"})}),"\n",(0,a.jsx)(n.p,{children:"Multiple columns can be added separated by comma.\nNested columns can be added as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- create a struct column\nALTER TABLE openhouse.db.table\nADD COLUMN point struct<x: double, y: double>;\n \n-- add a field to the struct\nALTER TABLE openhouse.db.table\nADD COLUMN point.z double\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- create a nested array column of struct\nALTER TABLE openhouse.db.table\nADD COLUMN points array<struct<x: double, y: double>>;\n \n-- add a field to the struct within an array. Using keyword 'element' to access the array's element column.\nALTER TABLE openhouse.db.table\nADD COLUMN points.element.z double\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- create a map column of struct key and struct value\nALTER TABLE openhouse.db.table\nADD COLUMN point_map map<struct<x: int>, struct<a: int>>;\n \n-- add a field to the value struct in a map. Using keyword 'value' to access the map's value column.\nALTER TABLE openhouse.db.table\nADD COLUMN point_map.value.b int\n \n-- Altering 'key' struct is not allowed. Only map 'value' can be updated.\n"})}),"\n",(0,a.jsx)(n.h4,{id:"alter-table--alter-column",children:"ALTER TABLE ... ALTER COLUMN"}),"\n",(0,a.jsx)(n.p,{children:"Alter column is used for:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Type widening, OpenHouse supports ",(0,a.jsx)(n.code,{children:"int to bigint"}),", ",(0,a.jsx)(n.code,{children:"float to double"})]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE openhouse.db.table ALTER COLUMN measurement TYPE double;\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Setting column comments"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE openhouse.db.table ALTER COLUMN measurement COMMENT 'unit is kilobytes per second';\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"Make field optional"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE openhouse.db.table ALTER COLUMN id DROP NOT NULL;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"grant-revoke",children:"GRANT/ REVOKE"}),"\n",(0,a.jsx)(n.p,{children:"Tables and databases in OpenHouse are access controlled by its own RBAC system, to perform any operation you need to have the right privilege."}),"\n",(0,a.jsx)(n.h4,{id:"alter-table-set-policy-sharing",children:"ALTER TABLE SET POLICY (SHARING=)"}),"\n",(0,a.jsx)(n.p,{children:"To make your table sharable, run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE openhouse.db.table SET POLICY (SHARING=TRUE);\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Trying to share a table without running this command will throw the error: ",(0,a.jsx)(n.code,{children:"db.table"})," is not a shared table"]})}),"\n",(0,a.jsx)(n.h4,{id:"grant-revoke-select-on-table",children:"GRANT/ REVOKE SELECT ON TABLE"}),"\n",(0,a.jsx)(n.p,{children:"As a TABLE_ADMIN you can grant another user TABLE_VIEWER role by running the SQL:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"GRANT SELECT ON TABLE openhouse.db.table TO <user>;\n"})}),"\n",(0,a.jsx)(n.p,{children:"To revoke the privilege:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"REVOKE SELECT ON TABLE openhouse.db.table FROM <user>;\n"})}),"\n",(0,a.jsx)(n.h4,{id:"grant-revoke-manage-grants-on-table",children:"GRANT/ REVOKE MANAGE GRANTS ON TABLE"}),"\n",(0,a.jsx)(n.p,{children:"As a ACL_EDITOR / TABLE_ADMIN, In order to grant sharing rights on your table to other users, you can make them ACL_EDITOR by running the SQL:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"GRANT MANAGE GRANTS ON TABLE openhouse.db.table TO <user>;\n"})}),"\n",(0,a.jsx)(n.p,{children:"To revoke:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"REVOKE MANAGE GRANTS ON TABLE openhouse.db.table FROM <user>;\n"})}),"\n",(0,a.jsx)(n.h4,{id:"grantrevoke-create-table-on-database",children:"GRANT/REVOKE CREATE TABLE ON DATABASE"}),"\n",(0,a.jsx)(n.p,{children:"As a ACL_EDITOR role of database you can grant TABLE_CREATOR role to whoever wants to create a table in your database."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"GRANT CREATE TABLE ON DATABASE openhouse.db TO <user>;\n"})}),"\n",(0,a.jsx)(n.p,{children:"To revoke:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"REVOKE CREATE TABLE ON DATABASE openhouse.db FROM <user>;\n"})}),"\n",(0,a.jsx)(n.h4,{id:"show-grants-on-tabledatabase",children:"SHOW GRANTS ON TABLE/DATABASE"}),"\n",(0,a.jsx)(n.p,{children:"In order to view granted privileges:"}),"\n",(0,a.jsx)(n.p,{children:"For Table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SHOW GRANTS ON TABLE openhouse.db.table;\n"})}),"\n",(0,a.jsx)(n.p,{children:"For Database:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SHOW GRANTS ON DATABASE openhouse.db;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"reads",children:"Reads"}),"\n",(0,a.jsx)(n.h3,{id:"select-from",children:"SELECT FROM"}),"\n",(0,a.jsxs)(n.p,{children:["OpenHouse supports ANSI SQL for SELECT statements. For complete syntax see ",(0,a.jsx)(n.a,{href:"https://spark.apache.org/docs/latest/sql-ref-syntax-qry-select.html",children:"Spark SELECT syntax"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM openhouse.db.table;\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Note: response of the table is cached for the duration of the session. In order to refresh the cache, please run\n",(0,a.jsx)(n.code,{children:"REFRESH TABLE"})]})}),"\n",(0,a.jsx)(n.h3,{id:"select-from-w-time-travel",children:"SELECT FROM w/ Time-Travel"}),"\n",(0,a.jsx)(n.p,{children:"OpenHouse uses Iceberg as the table format. Iceberg generates a version/snapshot for every update to the table. A\nsnapshot captures the state of the table at a specific point in time. We can query iceberg tables using the snapshot ID\nor timestamp from the past. Unlike Hive, Iceberg guarantees query reproducibility when querying historical data."}),"\n",(0,a.jsx)(n.p,{children:"Time-travel is supported through following syntax."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'-- suffix with "at_timestamp" string and epoch time in milliseconds.\nSELECT * FROM openhouse.db.table.at_timestamp_1686699440000;\n \n-- standard sql dialect for this time-travel is NOT supported\nSELECT * FROM openhouse.db.table FOR SYSTEM_TIME AS OF 1686699440000;\n'})}),"\n",(0,a.jsx)(n.p,{children:"Querying a older version of a table is supported through following syntax."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'-- suffix with "snapshot_id" string followed by the ID of snapshot or version.\nSELECT * FROM openhouse.db.table.snapshot_id_821787972099903997;\n \n-- standard sql dialect for this version query is NOT supported\nSELECT * FROM openhouse.db.table FOR SYSTEM_VERSION AS OF 821787972099903997;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"writes",children:"Writes"}),"\n",(0,a.jsx)(n.h3,{id:"insert-into",children:"INSERT INTO"}),"\n",(0,a.jsx)(n.p,{children:"OpenHouse supports standard ANSI SQL for INSERT statements."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"INSERT INTO openhouse.db.table VALUES (1, 'a'), (2, 'b');\n"})}),"\n",(0,a.jsx)(n.h3,{id:"delete-from",children:"DELETE FROM"}),"\n",(0,a.jsx)(n.p,{children:"Where clause is used to delete rows"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"DELETE FROM openhouse.db.table WHERE ts >= '2020-05-01 00:00:00' and ts < '2020-06-01 00:00:00';\n"})}),"\n",(0,a.jsx)(n.h3,{id:"insert-overwrite",children:"INSERT OVERWRITE"}),"\n",(0,a.jsx)(n.p,{children:"Insert overwrite replaces the partitions in the target table that contains rows from the SELECT query."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"INSERT OVERWRITE openhouse.db.table SELECT uuid, ts\nFROM anyCatalog.db.another_table\nWHERE cast(ts as date) = '2020-07-01'\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"danger",children:(0,a.jsx)(n.p,{children:"If the table is unpartitioned the whole table data will be replaced."})}),"\n",(0,a.jsx)(n.h3,{id:"update",children:"UPDATE"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:"update"})," clause to update specific rows."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"UPDATE openhouse.db.table SET data = 'updated_data'\nWHERE ts >= '2020-05-01 00:00:00' and ts < '2020-06-01 00:00:00'\n"})}),"\n",(0,a.jsx)(n.h3,{id:"merge-into",children:"MERGE INTO"}),"\n",(0,a.jsx)(n.p,{children:"Merge into is used to update target table (ex. db.target) based on source query (SELECT ..)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"MERGE INTO openhouse.db.table t\nUSING (SELECT ...) s\nON t.id = s.id\nWHEN MATCHED .. THEN..\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The merge condition ",(0,a.jsx)(n.code,{children:"WHEN  MATCHED .. THEN .."})," determines whether update/delete/insert would happen"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- delete\nWHEN MATCHED AND s.op = 'delete' THEN DELETE\n-- update\nWHEN MATCHED AND t.count IS NULL AND s.op = 'increment' THEN UPDATE SET t.count = 0\n-- insert\nWHEN NOT MATCHED THEN INSERT *\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"THEN INSERT"})," also supports additional conditions"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"WHEN NOT MATCHED AND s.event_time > still_valid_threshold THEN INSERT (id, count) VALUES (s.id, 1)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Complete syntax can be seen at ",(0,a.jsx)(n.a,{href:"https://docs.databricks.com/spark/latest/spark-sql/language-manual/delta-merge-into.html",children:"Databricks Merge Into"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"inspecting-metadata",children:"Inspecting Metadata"}),"\n",(0,a.jsx)(n.h3,{id:"list-partitions",children:"List Partitions"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"show partitions db.table"})," does not work for OpenHouse tables. You can do the same thing with different SQL syntax like below:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:" SELECT * FROM openhouse.db.table.partitions;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"list-snapshots",children:"List Snapshots"}),"\n",(0,a.jsx)(n.p,{children:"Each update to the table will generate a new snapshot. Browsing snapshots is a critical feature to enable time-travel queries with snapshhot-id and commit-timestamp."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM openhouse.db.table.snapshots\n"})}),"\n",(0,a.jsx)(n.h2,{id:"unsupported-operations",children:"Unsupported Operations"}),"\n",(0,a.jsx)(n.p,{children:"Following SQL commands are unsupported"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE LIKE\n\n-- Renaming Fields\nALTER TABLE openhouse.db.table RENAME COLUMN data TO payload\nALTER TABLE openhouse.db.table RENAME COLUMN point.x TO x_axis\n \n-- Setting comments and type-widening at the same time\nALTER TABLE openhouse.db.table ALTER COLUMN measurement TYPE double COMMENT 'unit is bytes per second'\n \n-- Reorder\nALTER TABLE openhouse.db.table ALTER COLUMN col FIRST\nALTER TABLE openhouse.db.sample ALTER COLUMN nested.col AFTER other_col\n \n-- Drop\nALTER TABLE openhouse.db.table DROP COLUMN id\nALTER TABLE openhouse.db.table DROP COLUMN point.z\n \n-- Other commands that are not supported yet\nALTER TABLE .. RENAME TO\nALTER TABLE ... ADD PARTITION FIELD\nALTER TABLE ... DROP PARTITION FIELD\nALTER TABLE ... REPLACE PARTITION FIELD\nALTER TABLE ... WRITE ORDERED BY\nALTER TABLE ... WRITE DISTRIBUTED BY PARTITION\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>r});var a=s(7294);const t={},l=a.createContext(t);function r(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);